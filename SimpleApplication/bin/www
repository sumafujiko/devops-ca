var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var fs = require('fs');
var https = require('https');
var path = require('path');

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var port = normalizePort(process.env.PORT || '8080');
var https_port = normalizePort(process.env.PORT_HTTPS || '8443');

if (process.env.ENV !== "DEV") {
  var privateKeyPath = process.env.SSL_KEY_PATH || path.join(__dirname, '..', 'privatekey.pem');
  var certPath = process.env.SSL_CERT_PATH || path.join(__dirname, '..', 'server.crt');

  var privateKey = fs.readFileSync(privateKeyPath, 'utf8');
  var cert = fs.readFileSync(certPath, 'utf8');

  var options = {
    key: privateKey,
    cert: cert
  };

  app.set("port", https_port);

  var server = https.createServer(options, app).listen(https_port, function () {
    console.log('HTTPS server listening on port ' + https_port);
  });

  server.on('error', onError);
  server.on('listening', onListening);

  // Redirect from http port to https
  http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port, https_port) + req.url });
    console.log("Redirecting HTTP request to HTTPS");
    res.end();
  }).listen(port);
} else {
  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  console.log('HTTP server listening on port ' + port);
}